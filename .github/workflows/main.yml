name: Build & Package Marvell AQC107 Driver for DS1821+

on:
  push:
    branches: [main]
  workflow_dispatch:

env:
  DSM_TAG: "7.2-72806" # DSM 7.2.2-72806 Update 3
  CPU_SERIES: "v1000" # DS1821+ v1000 x86_64
  ARCH: "x86_64"
  KERNEL_VER: "4.4.302" # DS1821+ DSM7.2 對應的內核版本
  PKG_NAME: "atlantic"
  AQC_ZIP_DIR: "07-18-24_Marvell_Linux_2.5.12"
  BASE_URL: "https://global.synologydownload.com/download/ToolChain"
  ARCHIVE_URL: "https://archive.synology.com/download/ToolChain"
  SPKSRC_REPO: "https://github.com/SynoCommunity/spksrc.git"
  # 25/06/11 資源網址
  # https://archive.synology.com/download/ToolChain/Synology%20NAS%20GPL%20Source/7.2-72806
  # https://archive.synology.com/download/ToolChain/toolchain/7.2-72806
  # https://www.marvell.com/support/downloads.html
  
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      # ————— 準備 —————

      - name: Install dependencies
        run: |
          sudo apt-get update && sudo apt-get install -y xz-utils bc build-essential wget unzip git

      - name: Extract Kernel version
        run: |
          # 宣告 KERNEL_VER_MAJOR 和 KERNEL_VER_MAJOR_MINOR (Extract X and X.Y from X.Y.Z)
          echo "KERNEL_VER_MAJOR=${KERNEL_VER%%.*}"  >> $GITHUB_ENV
          echo "KERNEL_VER_MAJOR_MINOR=${KERNEL_VER%.*}" >> $GITHUB_ENV
          
      - name: Set REPO_URL and Download essential files
        run: |
          # 1) 設定 REPO_URL 並下載 aqc107.cfg
          MY_REPO_URL="https://raw.githubusercontent.com/${GITHUB_REPOSITORY}/main"
          curl -L -o aqc107.cfg ${MY_REPO_URL}/kernel-config-append/aqc107.cfg
          # 2) 宣告 REPO_URL
          echo "REPO_URL=${MY_REPO_URL}" >> $GITHUB_ENV

      # - name: 下載官方 Linux 原始碼（補齊 generated/）
      #   run: |
      #     # https://mirrors.edge.kernel.org/pub/linux/kernel/v4.x/linux-4.4.302.tar.gz
      #     wget -O linux-${KERNEL_VER}.tar.gz "https://mirrors.edge.kernel.org/pub/linux/kernel/v${KERNEL_VER_MAJOR}.x/linux-${KERNEL_VER}.tar.gz"
      #     tar zxvf linux-${KERNEL_VER}.tar.gz

      - name: 下載並解壓 Synology 內核原始碼 (25/06/11)
        run: |
          wget -O linux-${KERNEL_VER_MAJOR_MINOR}.x.txz "${BASE_URL}/Synology%20NAS%20GPL%20Source/${DSM_TAG}/${CPU_SERIES}/linux-${KERNEL_VER_MAJOR_MINOR}.x.txz"
          tar xJf linux-${KERNEL_VER_MAJOR_MINOR}.x.txz
          
      - name: 下載並解壓 Synology 交叉編譯工具鏈 (25/06/11)
        run: |
          TOOLCHAIN_FOLDER="${ARCHIVE_URL}/toolchain/${DSM_TAG}"
          echo "Listing platform dirs in: $TOOLCHAIN_FOLDER"

          # 1) 抓出 href
          TOOLCHAIN_URL=$(wget -qO- "$TOOLCHAIN_FOLDER/" \
            | grep -Po '(?<=href=")[^"]+' \
            | grep -i "$KERNEL_VER" \
            | grep -i "$CPU_SERIES" \
            | grep -i "$ARCH" \
            | head -n1)
          echo "Raw href: $TOOLCHAIN_URL"

          # 2) 判斷絕對/相對
          if [[ "$TOOLCHAIN_URL" =~ ^https?:// ]]; then
            echo "Detected absolute URL."
          else
            TOOLCHAIN_URL="${TOOLCHAIN_FOLDER}/${TOOLCHAIN_URL}"
            echo "Detected relative URL; resolved to $TOOLCHAIN_URL"
          fi

          # 3) 下載並解壓
          wget -O toolchain.txz "$TOOLCHAIN_URL"
          tar xJf toolchain.txz

      - name: 建立驅動目錄
        run: |
          mkdir -p driver
          echo "DRIVER_DIR=${PWD}/driver" >> $GITHUB_ENV

      - name: 下載並解壓 Marvell AQC107 驅動 (25/06/11)
        run: |
          # 1) 下載並解壓
          mkdir -p "${DRIVER_DIR}/${PKG_NAME}"

          PKG_VERSION="${AQC_ZIP_DIR##*_}"   # → 2.5.12
          AQC_DRIVER_URL="https://www.marvell.com/content/dam/marvell/en/drivers/${AQC_ZIP_DIR}.zip"

          wget -q -O marvell.zip "${AQC_DRIVER_URL}"

          # 只解出 atlantic.tar.gz
          unzip -j marvell.zip "${AQC_ZIP_DIR}/atlantic.tar.gz"

          # 把 Linux/ 這一層 strip 掉
          tar -xzf atlantic.tar.gz \
              --strip-components=1 \
              -C "${DRIVER_DIR}/${PKG_NAME}"

          # 2) 宣告 PKG_VERSION
          echo "PKG_VERSION=$PKG_VERSION" >> $GITHUB_ENV

      # ————— 編譯 —————

      # - name: 準備內核原始碼（生成 include/generated）
      #   run: |
      #     cd linux-${KERNEL_VER}
      #     make oldconfig
      #     make prepare
      #     cd ..

      # - name: 設定交叉編譯環境變數
      #   run: |
      #     echo "ARCH=${ARCH}" >> $GITHUB_ENV

      - name: 啟動 Synology 內核編譯功能
        run: |
          # 1) 宣告環境變數 TOOLCHAIN_DIR 和 CROSS_COMPILE
          echo "KERNEL_SRC=${PWD}/linux-${KERNEL_VER_MAJOR_MINOR}.x" >> $GITHUB_ENV
          echo "TOOLCHAIN_DIR=${PWD}/${ARCH}-pc-linux-gnu/" >> $GITHUB_ENV
          # CROSS_COMPILE_PATH="${PWD}/${ARCH}-pc-linux-gnu/bin/${ARCH}-pc-linux-gnu-"
          # echo "CROSS_COMPILE_ENV=${CROSS_COMPILE_PATH}" >> $GITHUB_ENV
          echo "CROSS_COMPILE=${PWD}/${ARCH}-pc-linux-gnu/bin/${ARCH}-pc-linux-gnu-" >> $GITHUB_ENV
          echo "${PWD}/${ARCH}-pc-linux-gnu/bin" >> $GITHUB_PATH     # gcc 放進 PATH

          # 2) 切換目錄到 linux-${KERNEL_VER_MAJOR_MINOR}.x
          cd linux-${KERNEL_VER_MAJOR_MINOR}.x
          
          # 3) 拷貝官方 synoconfigs 基礎 config
          cp synoconfigs/${CPU_SERIES} .config

          # 4) 用 merge_config.sh 合併你的 cfg
          scripts/kconfig/merge_config.sh .config ../aqc107.cfg
          yes "" | make oldconfig      # 自動答預設

          # 5) 修改 Makefile ( EXTRAVERSION = to EXTRAVERSION = + )
          sed -i "s/EXTRAVERSION = /EXTRAVERSION = +/g" Makefile

          # 6) 準備編譯
          make clean
          # make -j$(nproc) CROSS_COMPILE=${CROSS_COMPILE_PATH} prepare
          # make -j$(nproc) CROSS_COMPILE=${CROSS_COMPILE_PATH} scripts
          make -j$(nproc) prepare
          make -j$(nproc) scripts

      - name: 編譯模組 AQC107
        run: |
          cd ${DRIVER_DIR}/${PKG_NAME}/

          FILE="${DRIVER_DIR}/${PKG_NAME}/aq_compat.h"
          
          # aq_compat.h 處理 page_ref_inc, page_ref_count

          sed -i '/static inline int page_ref_count/,/^#endif/{c\
          #endif\
          }' "$FILE"


          # 編譯
          make -j$(nproc) CROSS_COMPILE=${CROSS_COMPILE} -C ${KERNEL_SRC} M=$PWD modules

      - name: 上傳 .ko 模組為 Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${PKG_NAME}-${PKG_VERSION}-ko
          path: ${DRIVER_DIR}/${PKG_NAME}/*.ko

      # ————— 開始打包成 SPK —————

      - name: Clone spksrc 框架
        run: git clone --depth 1 ${SPKSRC_REPO} spksrc

      - name: 複製 .ko 到 spksrc 專案
        run: |
          mkdir -p spksrc/packages/driver/${PKG_NAME}/dl
          cp atlantic/Linux/atlantic.ko spksrc/packages/driver/${PKG_NAME}/dl/

      - name: 更新 spksrc 中的版本號
        run: |
          sed -i "s/^VERSION *= .*/VERSION = ${PKG_VERSION}/" spksrc/packages/driver/${PKG_NAME}/Makefile

      - name: 建置 SPK 套件
        run: |
          cd spksrc
          make arch-${ARCH} PACKAGE=${PKG_NAME} \
               TOOLCHAIN_DIR=${TOOLCHAIN_DIR} \
               GCC_DIR=${TOOLCHAIN_DIR}/bin

      - name: 上傳產出的 .spk
        uses: actions/upload-artifact@v4
        with:
          name: ${PKG_NAME}-${PKG_VERSION}.spk
          path: spksrc/spk/${ARCH}/output/${PKG_NAME}-${PKG_VERSION}-${ARCH}.spk
